#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('api:server');
var http = require('http');
const { Server } = require("socket.io");
const jwt = require("jsonwebtoken");
var os = require('os');
var { listContainers } = require('../docker/index');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = new Server(server, {
  cors: {
    origin: "http://localhost:3000"
  }
});

io.use((socket, next) => {
  if (socket.handshake.auth && socket.handshake.auth.token && socket.handshake.auth.token.startsWith("Bearer ")) {
    jwt.verify(socket.handshake.auth.token.substring(7, socket.handshake.auth.token.length), process.env.JWT_SECRET, (err, decoded) => {
      console.log(socket.handshake.auth.token)
      if (err) return next(new Error('Authentication Error'));
      socket.decoded = decoded;
      next();
    })
  }
  else {
    next(new Error('Authentication Error'))
  }
})
.on("connection", (socket) => {
    console.log("New client connected");
    socket.on("disconnect", () => {
        console.log("Client disconnected");
    });
});

async function sendServerUsage() {
  // Calculate server usage data (e.g. CPU usage)
  let cpu = os.loadavg(), cpuArch = os.machine(), processorCount = os.cpus().length;
  let mem = {totalMem: os.totalmem()/1024/1024, freeMem: os.freemem()/1024/1024}
  let containersList = await listContainers();
  let usageData = {
    cpuArch,
    cpu,
    containersList,
    processorCount,
    mem
  }
  // Send the usage data to the client using Socket.io
  io.emit('server usage', usageData);
}
setInterval(sendServerUsage, 2000);

// function calculateServerUsage() {
//   let cpu = os.cpus();
//   for (var i = 0, len = cpu.length; i < len; i++) {
//     var cpuTemp = cpu[i], total = 0;
//     for (var type in cpuTemp.times) {
//       total += cpuTemp.times[type];
//     }
//     for (type in cpu.times) {
//       console.log("\t", type, Math.round(100 * cpu.times[type] / total)); 
//     }
//   }
//   let mem = {totalMem: os.totalmem()/1024/1024, freeMem: os.freemem()}
// }

// setInterval(sendServerUsage, 5000);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
